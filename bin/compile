#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

NODE_VERSION=0.10.28
echo "-----> Installing Node.JS v$NODE_VERSION"
NODE_URL="http://s3pository.heroku.com/node/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"
curl $NODE_URL -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$NODE_VERSION-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$BUILD_DIR/vendor/node/bin:$PATH

echo "-----> Installing NPM dependencies"
cd $BUILD_DIR
npm install

echo "-----> Generating website with Verstat"
node_modules/.bin/verstat -e static generate

TMP_DIR=$(mktemp -d -t out.XXXXXX)
mv out/* $TMP_DIR
rm -rf $BUILD_DIR/*
mv $TMP_DIR/* $BUILD_DIR/

if [ ! -f $BUILD_DIR/conf/nginx.conf.erb ]; then
    mkdir -p $BUILD_DIR/conf
	cat <<EOF >"$BUILD_DIR/conf/mime.types"
types {
    text/html                             html htm shtml;
    text/css                              css;
    text/xml                              xml rss;
    image/gif                             gif;
    image/jpeg                            jpeg jpg;
    application/javascript                js;
    application/atom+xml                  atom;

    text/cache-manifest                   manifest appcache;
    text/mathml                           mml;
    text/plain                            txt;
    text/vnd.sun.j2me.app-descriptor      jad;
    text/vnd.wap.wml                      wml;
    text/x-component                      htc;

    image/png                             png;
    image/svg+xml                         svg svgz;
    image/tiff                            tif tiff;
    image/vnd.wap.wbmp                    wbmp;
    image/webp                            webp;
    image/x-icon                          ico;
    image/x-jng                           jng;
    image/x-ms-bmp                        bmp;

    application/java-archive              jar war ear;
    application/mac-binhex40              hqx;
    application/msword                    doc;
    application/pdf                       pdf;
    application/postscript                ps eps ai;
    application/rtf                       rtf;
    application/vnd.ms-excel              xls;
    application/vnd.ms-powerpoint         ppt;
    application/vnd.wap.wmlc              wmlc;
    application/vnd.wap.xhtml+xml         xhtml;
    application/x-chrome-extension        crx;
    application/x-cocoa                   cco;
    application/x-java-archive-diff       jardiff;
    application/x-java-jnlp-file          jnlp;
    application/x-makeself                run;
    application/x-perl                    pl pm;
    application/x-pilot                   prc pdb;
    application/x-rar-compressed          rar;
    application/x-redhat-package-manager  rpm;
    application/x-sea                     sea;
    application/x-shockwave-flash         swf;
    application/x-stuffit                 sit;
    application/x-tcl                     tcl tk;
    application/x-x509-ca-cert            der pem crt;
    application/x-xpinstall               xpi;
    application/zip                       zip;

    application/octet-stream              bin exe dll;
    application/octet-stream              deb;
    application/octet-stream              dmg;
    application/octet-stream              iso img;
    application/octet-stream              msi msp msm;
    application/octet-stream              safariextz

    audio/midi                            mid midi kar;
    audio/mpeg                            mp3;
    audio/x-realaudio                     ra;
    audio/ogg                             oga ogg;

    video/3gpp                            3gpp 3gp;
    video/mpeg                            mpeg mpg;
    video/ogg                             ogv;
    video/quicktime                       mov;
    video/webm                            webm;
    video/x-flv                           flv;
    video/x-mng                           mng;
    video/x-ms-asf                        asx asf;
    video/x-ms-wmv                        wmv;
    video/x-msvideo                       avi;

    application/vnd.ms-fontobject         eot;
    font/truetype                         ttf;
    font/opentype                         otf;
    font/woff                             woff;
}
EOF

	cat <<EOF >"$BUILD_DIR/conf/nginx.conf.erb"
worker_processes  4;
worker_rlimit_nofile 8192;
daemon off;

events {
    worker_connections  8000;
    accept_mutex off;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    error_log   logs/error.log  notice;

    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay off;

    keepalive_timeout  65;

    gzip  on;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_min_length 1100;
    gzip_buffers     4 8k;
    gzip_proxied any;
    gzip_types
      # text/html is always compressed by HttpGzipModule
      text/css
      text/javascript
      text/xml
      text/plain
      text/x-component
      application/javascript
      application/json
      application/xml
      application/rss+xml
      font/truetype
      font/opentype
      application/vnd.ms-fontobject
      image/svg+xml;

    gzip_static on;

    gzip_proxied        expired no-cache no-store private auth;
    gzip_disable        "MSIE [1-6]\.";
    gzip_vary           on;
    
    include       mime.types;
    default_type  application/octet-stream;

    server {
        server_name  localhost;
        listen       <%= ENV['PORT'] %>;

        error_page 404 403 /404.html;
        root  <%= ENV['HOME'] %>;

        autoindex           off;
        index index.html;

        try_files $uri $uri/ =404;
        # opt-in to the future
        # expires 2592000;
        charset utf-8;

        location ~ /\. {
            deny            all;
            access_log      off;
            log_not_found   off;
        }
        
        location ~* ^.+\.(html|htm|php|html.gz)$ {
          add_header Cache-Control "max-age=0, no-cache";
          add_header "X-UA-Compatible" "IE=Edge,chrome=1";
        }
        
        location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm)$ {
          access_log off;
          add_header Cache-Control  "public, max-age=2592000";          
        }        
    }
}
EOF

fi

# nginx part taken from essh/heroku-buildpack-nginx

echo "-----> Fetching nginx binaries"
# config
NGINX_VERSION="1.0.14"
S3_BUCKET="essh-heroku-buildpack-nginx"
# s3 packages
NGINX_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nginx-${NGINX_VERSION}.tgz"
# vendor directories
VENDORED_NGINX=$(mktemp -d -t nginx.XXXXXX)
# download and unpack packages
curl $NGINX_PACKAGE -s -o - | tar xzf - -C $VENDORED_NGINX

echo "-----> Vendoring nginx $NGINX_VERSION"
# vendor nginx into the slug
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NGINX/sbin/nginx" "$BUILD_DIR/bin/nginx"

# build a startup script
cat <<EOF >"$BUILD_DIR/bin/start_nginx"
#!/usr/bin/env bash
erb conf/nginx.conf.erb > conf/nginx.conf
mkdir -p logs
touch logs/access.log logs/error.log
(tail -qF -n 0 --pid=\$\$ logs/*.log &)
exec bin/nginx -p .
EOF
chmod +x "$BUILD_DIR/bin/start_nginx"
